#!/usr/bin/env bash

DOC='# Meta Gear Manager

Manages package managers which work in user mode.

See README.md
'

devnotes='
# DEV Notes

## Cloud Init (e.g. as root)

    #cloud-config

    runcmd:
    - wget "https://raw.githubusercontent.com/AXGKl/gear/master/gear"
    - chmod +x gear
    ...

# Nix

    ~/repos/gh/AXGKl/gear master !1 ‚ùØ nix-channel --list                                                                                                Óúº base
    nixgl https://github.com/guibou/nixGL/archive/main.tar.gz

    nix repl --expr "import <nixpkgs>{}" -> type firef<TAB>
'

set -eu

ALL_GEARMGRS="binenv asdf micromamba nix brew sys" # brew nix"
GM_ALIASES='
a:asdf
b:binenv
brew:brew
mm:micromamba
n:nix
s:sys
' # declare -A not supported on older bash (e.g. osx)

unset IFS
export PS4='$0.${FUNCNAME:-}.$LINENO+üü™ '
export HOME="${HOME:-/root}"
export USER="${USER:-root}"
H="$HOME"
case "$(uname)" in Linux) OS=linux ;; Darwin) OS=darwin ;; *) OS= ;; esac
ARCH="amd64"
case "$(uname -m)" in arm | aarch64) ARCH='' ;; esac
with_nix=false
with_brew=false
FNLOG=
sep() { printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -; }
err_handler() {
    # this is run in ephemereal containers, want to remain inside on my laptop in case of errors:
    local parent_lineno="$1" code="$2" commands="$3"
    test "$code" = '0' && exit 0
    $log_shw && out "üìî" "Command Log:" && sep && tail -n 10 "$FNLOG" && sep && echo && echo
    nfo "\x1b[2;36merror exit status $code, at file $0 on or near line $parent_lineno\x1b[0m"
    "${GEAR_NO_EXIT_AT_ERR:-false}" && /bin/bash
    false
}

trap 'err_handler "${BASH_LINENO}" "$?" "$BASH_COMMAND"' EXIT
indnt=false
log_shw=false
# ------------------------------------------------------------------------- UTILS
function out {
    local ico="$1" && shift
    local s="$SECONDS"
    test "$s" = "0" && s=""
    $indnt && printf "\x1b[2;38;5;240m%3s\x1b[0m " $s || indnt=''
    printf "%s%s %b\x1b[0m\n" "$indnt" "$ico" "$*" >&2
}

function title { out ‚ñ™Ô∏è "\x1b[1;${2:-32}m$1\x1b[0m"; }
function nfo { out ‚ÑπÔ∏è "$@"; }
function good { out üü© "$@"; }
function err { out üü• "$@"; }
function die { set +x && err "$*" && exit 1; }
function shw {
    $VERBOSE && test "${1:-}" = silent && shift
    test "$(type -t "$1")" = function && out ùëì "\x1b[2;36m$@" || out ‚öôÔ∏è "$@"
    indnt="$indnt  "
    log_shw=false
    "$@"
    ret=$? && indnt="${indnt::-2}" && test "$ret" = "0" || log_shw=true
    return "$ret"
}
function shtit { title "$*" 33 && "$@"; }
function confirm {
    local conf && echo && out '‚ùì' "$@ [y/N]? " && read -r conf
    test "$conf" = "y" -o "$conf" = "y" && return 0 || die "Unconfirmed"
}
function silent { out ü§´ "$@" >>"$FNLOG" 2>&1 && "$@" 2>>"$FNLOG" 1>>"$FNLOG"; }
function try { silent "$@" || true; }
function have { silent hash "$1"; }
function have_shw { have "$1" && { nfo "Have $1: $(type "$1" 2>/dev/null | head -n 1)" && return 0; } || return 1; }
function add_path { echo "$PATH" | grep -q "$1:" || export PATH="$1:$PATH"; }
function chmod_ { chmod +x "$1"; }
function tmpfn { local d="/tmp/$USER.gear" && mkdir -p "$d" && echo "$d/$1"; }
function waitfor { while true; do have "$1" && break || sleep 0.1; done; }
function download {
    /bin/rm -f "$2"
    silent wget -q "$1" -O "$2" || silent curl -L "$1" --output "$2" || true
    test -s "$2" || die "Download failed: $1 -> $2"
    test -z "${3:-}" && return 0
    "$3" "$2"
}

function source_shell_hooks { test -e "$FN_ACT_GEARS" && . "$FN_ACT_GEARS" || true; }
function set_sh_sep {
    local sep && sep="$1"
    SH_SEP1="# >>> $sep initialize >>>" # mamba style, only one which does it
    SH_SEP2="# <<< $sep initialize <<<"
}

function bootstrap_add_shell_hook {
    local rm=false && test "${2:-}" = remove && rm=true
    local fnt act name="$1" what fn="$FN_ACT_GEARS"
    what="$(${name}:shellhook)"
    test -z "$what" && return # nix
    touch "$fn"
    nfo "Modifying $fn for $name"
    set_sh_sep "$name"
    act="$SH_SEP1\n$what\n$SH_SEP2"

    grep -q "$SH_SEP1" <"$fn" || {
        $rm && return 0
        echo -e "$act" >>"$fn" && return 0
    } # had no hook yet
    fnt="$(tmpfn shhook)"
    grep -B 10000 "$SH_SEP1" <"$fn" | grep -v "$SH_SEP1" >"$fnt" || true
    $rm || echo -e "$act" >>"$fnt"
    grep -A 10000 "$SH_SEP2" <"$fn" | grep -v "$SH_SEP2" >>"$fnt" || true
    mv "$fnt" "$fn"
    set +x
}
function rmf() {
    while [[ $# -gt 0 ]]; do
        test -e "$1" || err "Not present: $1"
        test -e "$1" && shw /bin/rm -rf "$1"
        shift
    done
}
with_root() {
    local r=false && { test "$1" = run && r=true && shift; }
    $IS_ROOT && {
        shw silent "$@"
        return $?
    }
    have sudo || die "Require sudo"
    nfo "Req sudo to run $1 - enter your password if asked"
    sudo -v || die "Sorry"
    if [ $r = true ]; then shw sudo "$@"; else shw "$@"; fi
    return $?
}
# --------------------------------------- ---------------------------------- GEARS
idxfn() { echo -e "$GEAR_CFG_DIR/idx.$1"; }
idxline() { local a="$1‚ú¶$2‚ú¶$3" && echo "${a//$'\n'/ - }"; } # rm newlines, replace with ' - '
IDXSEP="üì¶"
if true; then # sys:
    sys:remove_all() { die "$(sys_apt_or_yum) cannot be removed"; }
    sys_apt_or_yum() { have apt && echo apt || { have yum && echo yum || echo ''; }; }
    sys:bootstrapped() { test ! -z "$(sys_apt_or_yum)"; }
    sys:bootstrap() { sys:bootstrapped || die "Only supporting apt and yum"; }
    sys:build_cache() { shw "$(sys_apt_or_yum)" update; }
    sys:status() {
        test -z "$(sys_apt_or_yum)" && err "Unsupported system"
        nfo "$(sys_apt_or_yum) based system"
    }
    sys:shellhook() { echo ''; }
    sys_pkg_map() {
        # only for tools we require potentiall...:
        local pkg="$1"
        test "$pkg" = "su" && pkg=util-linux
        test "$pkg" = "ps" && pkg=procps
        have apt && test "$pkg" = "xz" && pkg="xz-utils"
        echo "$pkg"
    }
    sys:install() {
        local pkg="$(sys_pkg_map "$1")"
        for i in 1 2; do
            with_root run "$(sys_apt_or_yum)" install -yq "$1" && return
            with_root run "$(sys_apt_or_yum)" update -q
        done
        return 1
    }
fi
if true; then # b:
    BINENV_URL="https://github.com/devops-works/binenv/releases/download/v0.19.0/binenv_${OS:-}_$ARCH"
    BINENV_CFG="$H/.config/binenv/distributions.yaml"
    binenv:remove_all() { rmf "$H/.config/binenv" "$H/.cache/binenv" "$H/.binenv"; }
    binenv:build_idx() {
        local fn
        # https://github.com/devops-works/binenv/issues/241
        for fn in "$BINENV_CFG" "$H/.config/distributions.yaml"; do test -e "$fn" && break; done
        test -e "$fn" || die "Not present: $BINENV_CFG - reinstall binenv"
        shw gear_ensure b:yq mm:python
        s='if 1:
        import os, json; d = json.loads(os.popen("""yq -o json ".sources" "'$fn'" """).read())
        for k, v in d.items():
            d = v.get("description", "").replace("\n", " - ")
            print("'$IDXSEP'".join((k, d, v.get("url", ""))))'
        python -c "$s" >"$(idxfn binenv)"
    }
    binenv:build_cache() { shw silent binenv update && binenv:build_idx; }
    binenv:bootstrapped() { have binenv; } # -> PATH seems set.
    binenv:status() { binenv versions -f; }
    binenv:shellhook() { echo 'echo "$PATH" | grep -q binenv || PATH="$HOME/.binenv:$PATH"'; }
    binenv:bootstrap() {
        local fn="$(tmpfn binenv)"
        test -s "$fn" || shw download "$BINENV_URL" "$fn" chmod_
        mkdir -p "$H/.config/binenv"
        shw "$fn" update && shw "$fn" install binenv
    }
    binenv:activate() { add_path "$H/.binenv" && have binenv; }
    binenv:have() { binenv versions -f | grep "^$1" | cut -d = -f 2 | xargs; }
    binenv:install() { shw binenv install "$pkg" "$ver"; }

    binenv:list() { binenv versions -f; }
    binenv:query() { binenv search "$1"; }
fi
if true; then # a:
    ASDF_REPO="https://github.com/asdf-vm/asdf.git"
    asdf:remove_all() { rmf "$H/.asdf"; }
    asdf:build_cache() {
        shw gear_ensure mm:python
        s='if 1:
        import os; s = os.popen("asdf plugin list all 2>/dev/null").read()
        s =s.strip().splitlines()
        while s:
            l = s.pop(0)
            try: k, u = l.split()
            except Exception as ex:  continue
            print("'$IDXSEP'".join((k, "", u)))'
        python -c "$s" >"$(idxfn asdf)"
    }

    asdf:get_() { export ASDF_REPO && shw silent git clone "$ASDF_REPO" "$H/.asdf" --branch v0.12.0; }
    asdf:bootstrapped() { have asdf; }
    asdf:status() { asdf plugin list; }
    asdf:shellhook() { echo 'source "$HOME/.asdf/asdf.sh"'; }
    asdf:bootstrap() {
        test -e "$H/.asdf" && return
        have git || gear_ensure mm:git,curl
        asdf:get_
    }
    asdf:activate() { silent . "$H/.asdf/asdf.sh"; }
    asdf:have() { asdf list "$1" | sed -e 's/*//g' | xargs; }
    asdf:install() {
        local rc
        local ver="${2:-latest}"
        (shw asdf plugin add "$1")
        rc="$?"
        test $rc = 0 || test $rc = 2 || return 1 # 2 when already added -> ok then
        shw asdf install "$1" "$ver"
        shw asdf global "$1" "$ver" # writes to ~/.gear-versions
    }
    asdf:list() { asdf list; }
    asdf:query() { ls "$HOME/.asdf/repository/plugins" | grep "${1:-}"; }
fi
if true; then
    MM_D_BASE="$H/micromamba"
    micromamba:remove_all() { rmf "$H/.local/bin/micromamba" "$H/micromamba" "$H/.condarc"; }
    micromamba:build_cache() { silent micromamba -p "$H/micromamba" install -qy non_existent || true; }
    micromamba:bootstrapped() {
        have micromamba && test -e "$MM_D_BASE" && type micromamba | grep -q install
    }
    micromamba:status() { micromamba info | grep 'base environment'; }
    micromamba:bootstrap() {
        export CONDA_FORGE_YES=yes
        export INIT_YES=no
        local fn
        fn="$(tmpfn mamba_installer)"
        test -s "$fn" || shw download "https://micro.mamba.pm/install.sh" "$fn"
        echo '' | "${SHELL}" <(cat "$fn") # install

        fn="$H/.condarc"
        _set_condarc() { grep -q "^$2:" <"$1" || echo -e "$3\n" >>"$1"; }
        _set_condarc "$fn" "auto_activate_base" 'auto_activate_base: true'
        _set_condarc "$fn" "auto_update_conda" 'auto_update_conda: false'
        _set_condarc "$fn" 'pkgs_dirs' "pkgs_dirs:\n  - \${HOME}/micromamba/pkgs"
        mkdir -p "$H/micromamba"
    }
    micromamba:shellhook() {
        local a="export MAMBA_EXE='$HOME/.local/bin/micromamba'"
        a="$a\nexport MAMBA_ROOT_PREFIX='$HOME/micromamba'"
        a=''$a'\neval "$($MAMBA_EXE shell hook -s bash -r $MAMBA_ROOT_PREFIX)"'
        echo "$a"
    }
    micromamba:have() { micromamba list -q --json "$1" | grep version | cut -d : -f 2 | xargs; }
    micromamba:install_multi() {
        local args=''
        while [[ $# -gt 0 ]]; do
            IFS='=' read -r pkg ver <<<"$1"
            args="$args $pkg"
            test -z "$ver" || args="$args==$ver"
            shift
        done
        # --offline: on osx we get cert errors with their  servers in CI
        # on linux the speedup should matter. Assumed nix and brew which are tried after this are explicit given:
        shw micromamba install --offline -q -y $args || shw micromamba install -q -y $args
    }
    micromamba:list() { micromamba list; }
    micromamba:query() { rg "$1" | grep name | cut -d : -f 3 | uniq; }
fi

if true; then
    NIX_URL="https://nixos.org/nix/install"
    NIX_URL_SELINUX="https://raw.githubusercontent.com/dnkmmr69420/nix-installer-scripts/main/installer-scripts/regular-nix-installer-selinux.sh"
    NIX_FN='/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    #NIX_FN="$H/.nix-profile/etc/profile.d/nix.sh" single user install
    NIX_CH_URL='https://nixos.org/channels/nixpkgs-unstable'
    NIX_SCK="/nix/var/nix/daemon-socket/socket"
    export NIXPKGS_ALLOW_UNFREE="${NIXPKGS_ALLOW_UNFREE:-1}"

    nix:remove_all() {
        with_root run rm -rf /nix
        # symlink exit check will fail:
        for fn in "$H/.nix-defexpr" "$H/.nix-profile"; do rmf "$fn" && /bin/rm -f "$fn"; done
        # that's what it tells us to do at reinstalls:
        for fn in $(find /etc -print 2>/dev/null | grep backup-before-nix); do
            grep -q '/nix/profiles' <"$fn" && { err "$fn unclean - you might need to clean original from nix stuff manually, before reinstall" && continue; }
            with_root run mv "$fn" "${fn//.backup-before-nix/}"
        done
    }
    nix:build_cache() {
        nix_ensure_daemon
        nix-channel --add "$NIX_CH_URL" nixpkgs && nix-channel --update nixpkgs
    }
    nix:bootstrapped() {
        shw silent nix --version
    }
    nix_start_daemon_bg() {
        err "Starting nix-daemon as root now. You should *really* do that using your init system..."
        $IS_ROOT && (. "$NIX_FN" && nix-daemon &) && disown
        $IS_ROOT || sudo -v
        $IS_ROOT || shw sudo bash -c '. "'$NIX_FN'" && nix-daemon & disown'
        shw sleep 1
    }
    nix_ensure_daemon() {
        test -e "$NIX_SCK" || shw nix_start_daemon_bg
        have ps || gear_ensure sys:ps
        pgrep nix-daemon || shw nix_start_daemon_bg
    }
    nix_install() {
        local url fn && url="$NIX_URL" && fn="$(tmpfn nix_installer)"
        test "$(getenforce 2>/dev/null)" = "Enforcing" && {
            hash semanage || die "Require semanage on an selinux system"
            url="$NIX_URL_SELINUX"
        }
        download "$url" "$fn" chmod_
        shw "$fn" --yes --no-channel-add --daemon || true
        test -e "$NIX_FN"
    }
    nix:bootstrap() {
        nix:bootstrapped && return 0
        shw gear_ensure mm:xz
        with_root nix_install
    }

    nix:status() { nix doctor; }
    nix:have() { nix-env --query | grep "^$1" | cut -d '-' -f 2 | xargs; }
    nix:install() {
        nix_ensure_daemon
        # install_multi? See https://stackoverflow.com/a/59460487 -> works - but no time gain
        # tips:
        # nix-env -iA nixpkgs.python3Packages.zodb => installs lib
        # OR from https://lazamar.co.uk/nix-versions/?channel=nixos-unstable&package=nodejs:
        # nix-env -iA nodejs_20 -b -f https://github.com/NixOS/nixpkgs/archive/976fa3369d722e76f37c77493d99829540d43845.tar.gz
        local is_tar=false ver="${2:-}"
        echo "$ver" | grep -q '.tar' && is_tar=true
        test -z "$ver" && {
            shw silent nix-env --prebuilt-only -iA "nixpkgs.$1"
            return $?
        }
        $is_tar && {
            shw silent nix-env --prebuilt-only -iA "$1" -f "https://github.com/NixOS/nixpkgs/archive/$2"
            return $?
        }
        return 1
    }
    nix:shellhook() { echo ". '$NIX_FN'"; } # on plain fedora the bash files in /etc where not enough
    nix:list() { nix-env --query; }
    nix:query() { cd "/nix/var/nix/profiles/per-user/root/channels/nixpkgs/pkgs" && rg "$1"; }
fi

if true; then
    BREW_URL="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"
    BREW_DIR="/home/linuxbrew/.linuxbrew"                 # only here it's fast (bins work). this is not conda...
    brew:build_cache() { shw try brew:install hello; }    # fails with gcc first time. no probl for bins
    brew:bootstrapped() { test -w "$BREW_DIR/bin/brew"; } # exists and writeable
    brew:status() { brew list; }
    brew_install() {
        export HOMEBREW_NO_INSTALL_CLEANUP=true
        # run with sudo password entered before, i.e. w/o re-enter needs:
        silent touch /.dockerenv || true # then it allows as root
        local fn && fn="$(tmpfn brew_installer)"
        download "$BREW_URL" "$fn" chmod_
        NONINTERACTIVE=1 CI=1 shw silent "$fn"
    }

    brew:bootstrap() {
        test -e "$BREW_DIR/bin/brew" || {
            shw gear_ensure mm:git,curl
            with_root brew_install
        }
        $IS_ROOT || sudo chown -R "$(whoami):$(whoami)" "$BREW_DIR"
    }
    brew:shellhook() { echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'; }
    brew:have() { brew list "$1" --versions | cut -d ' ' -f 2 | xargs; }

    brew:install() {
        local d="$H/micromamba/bin"
        test -e "$d/curl" && export HOMEBREW_CURL_PATH="$d/curl"
        test -e "$d/git" && export HOMEBREW_GIT_PATH="$d/git"
        local t="$1" && test -z "${2:-}" || t="$t@$2"
        "$BREW_DIR/bin/brew" install "$t"
    }
    brew:list() { brew list --versions; }
    brew:query() {
        cd /home/linuxbrew/.linuxbrew
        test -e "./homebrew-core" || git clone --depth=1 https://github.com/Homebrew/homebrew-core
        cd homebrew-core
        rg -A1 'desc ' | rg -A1 -i "$1"
    }
fi

# ------------------------------------------------------------------------- CMDS
if true; then
    _INST_GEARMGRS='' # all installed ones

    GEAR_DEBUG="${GEAR_DEBUG:-false}"
    GEAR_CFG_DIR="$H/.config/gear"
    FN_ACT_GEARS="$H/.gears"
    function gearmgr_alias {
        local r && r="$(grep "^$1:" <<<"$GM_ALIASES" | cut -d : -f 2)"
        test -z "$r" && echo "$1" || echo "$r"
    }

    function set_installed_gearmgrs {
        local m a=''
        for m in $ALL_GEARMGRS; do
            silent "$m:bootstrapped" || continue
            a="$a $m"
        done
        _INST_GEARMGRS="$(echo "$a" | xargs)"
    }

    gear_install() { gear_ensure --no-take-any "$@"; }

    gear_remove() { gear_ensure --remove "$@"; }

    gear_ensure() {
        _INST_GEARMGRS='' # all installed ones
        local arg='--take-any'
        test "$1" = '--no-take-any' -o "$1" = "--remove" && { arg="$1" && shift; }
        while [[ $# -gt 0 ]]; do
            shw gear_handle_single_spec_arg "$arg" "$1"
            shift
        done
    }

    gear_handle_single_spec_arg() {
        true EnsureOrRemoveManagersAndPackages <<'        üìì'
            $1: packages spec, containing infos about gear manager to use, package, versions and commands
            $2: If = "--take-any", then check if cmd is found *anywhere* in current $PATH already - and if so, succeed (skip that install)

            Package spec examples:
            - foo (or :foo)
                install package foo latest ver, trying all installed gearmanagers in order given by $ALL_GEARMGRS
            - binenv:foo  (or b:foo)
                install package foo latest ver using binenv. If binenv not there, bootstrap it
            - b (or binenv)
                only install binenv if not present
            - foo:1.2.3
                install foo in ver 1.2.3, trying all mgrs. This sets $2 to false, since we can't know the version of any non gear managed pkg
            - b:foo=1.2.3
                install foo, ver 1.2.3 in binenv. 
            - a:ripgrep=1.2.3:rg
                install ripgrep, this version in asdf, trying rg as cmd for presence checks
            - a:ripgrep=1.2.3:rg,nodejs=18.0.0:npm
                using asdf, install ripgrep and nodejs in given versions, trying rg and npm commands for presence checks
                CAUTION: Varying how gear managers treat missing packages here:
                         Some will install the working ones, then fail - others reject everything if not all are known.
            - a:ripgrep,mm:nodejs (or ripgrep,a:lazygit)
                FORBIDDEN (supply more managers). Use gear_ensure for such things
                => any manager has to be first part of the spec
        üìì
        local gm cmd spec specs
        local rm_mode=false take_any=false
        test "$1" = --remove && { shift && rm_mode=true && take_any=false; }
        test "$1" = --take-any && { shift && take_any=true; }
        test "$1" = --no-take-any && { shift && take_any=false; }
        test -z "$1" && die "Require spec"
        # quick check for common use:
        spec="$1" && $take_any && have_shw "$1" && return || true
        IFS=: read -r gm specs <<<"$spec"

        local gm_given=false
        test -z "$gm" || {
            # is the first arg a gear manager?
            gm="$(gearmgr_alias "$gm")"
            for m in $ALL_GEARMGRS; do
                test "$m" = "$gm" || continue
                gm_given=true
                $rm_mode && continue
                "$gm:bootstrapped" && break
                shw gear_bootstrap -fg "$gm" # cache build in fg, otherwise subseq install would fail (asdf)
                set_installed_gearmgrs
                break
            done
            # if the first one was NO gear manager, then specs is the first arg:
            $gm_given || {
                gm='' && specs="$1"
                test -z "$_INST_GEARMGRS" && set_installed_gearmgrs # only first run
            }
        }
        $gm_given && $rm_mode && {
            shw gear_remove_manager "$gm"
            return $?
        }
        local spec='' args='' args='' cmds='' ver=''
        test -z "$specs" && { have_shw "$gm" && return || return; }
        #echo "$specs is specs"
        for spec in ${specs//,/ }; do
            IFS=':' read -r pkg cmd <<<"$spec"
            IFS='=' read -r pkg ver <<<"${pkg//==/=}"
            test -z "$cmd" && cmd="$pkg"
            $take_any && have_shw "$cmd" && continue
            cmds="$cmds $cmd"
            args="$args $pkg=$ver"
        done

        test -z "$args" && return

        #echo "gm:$gm args:$args cmd:$cmds"
        if [ ! -z "$gm" ]; then
            shw install_packages "$gm" $args
        else
            local b
            for p in $args; do
                b=false
                for m in $_INST_GEARMGRS; do install_packages "$m" "$p" && b=true && break; done
                $b || die "Could not install $p"
            done
        fi
        for c in $cmds; do
            have_shw "$c" || nfo "üì¶$args installed but cmd $c not found - assuming you forgot to mention."
        done
    }
    gear_remove_manager() {
        err "Remove manager $1"
        $INTERACTIVE && confirm "Ok to remove gear manager $1 and all it's packages"
        shw "$1:remove_all"
        bootstrap_add_shell_hook "$1" remove
        local r=$? && hash -r && return $r
    }
    install_packages() {
        local m="$1"
        shift && local f="${m}:install_multi"
        have "$f" && {
            # we prevent this common programming error totally:
            have "${m}:install" && die "code error: defined  $f and also single install"
            shw "$f" "$@"
            return $?
        }
        while [[ $# -gt 0 ]]; do
            IFS='=' read -r pkg ver <<<"$1"
            shw "${m}:install" "$pkg" "$ver" || return 1
            shift
        done
    }
    gear_query() {
        local ti
        set_installed_gearmgrs
        have rg || silent binenv install rg
        for m in $_INST_GEARMGRS; do title "Query $m" && "${m}:query" "${1:-}" || true; done
    }
    gear_list() {
        local ti
        set_installed_gearmgrs
        for m in $_INST_GEARMGRS; do title "Installed by: $m" && "${m}:list" | grep "${1:-}" || true; done
    }

    gear_status() {
        have gear || err "gear is not in your \$PATH"
        test -e "$FN_ACT_GEARS" || err "No $FN_ACT_GEARS"
        for m in $ALL_GEARMGRS; do
            silent "${m}:bootstrapped" && good "$m" || err "$m"
        done
    }
    gear_bootstrap() {
        mkdir -p "$GEAR_CFG_DIR"
        true Boostrapping <<'        üìì'
        We consider a gear manager "bootstrapped", when the shell hook was evaled.

        Eval does:

        - for binenv_ path added
        - for asdf_ asdf.sh sourced
        - for mm: micromamba avail as FUNCTION (not necessarily yet activated)

        I.e. the bootstrapping process does add the shell hook to `.<bash | zsh >rc`.
        User can change that and eval in other places but those should be evaled FROM shellrc as well.

        Following we install all one after the other, activate, then build indexes (which takes time)
        ‚ÑπÔ∏è We do not build caches in the background, needs clean locking first, for subseq. installs.
        üìì
        # bg disabled by implict installs via ensure_installed:
        local bg=true && test "${1:-}" = '-fg' && { bg=false && shift; }
        gear_prepare_self
        local m inst=""
        while [[ $# -gt 0 ]]; do
            m="$(gearmgr_alias "$1")" && shift
            "$m:bootstrapped" && nfo "Already bootstrapped: $m" && continue
            inst="$inst $m"
            shw gear_bootstrap_single "$m"
        done
        test -z "$inst" && return 0
        source_shell_hooks
        for m in $inst; do "$m:bootstrapped" || die "Could not bootstrap $m"; done

        title "Building caches for$inst üïê..."
        function bc { shw "$1:build_cache" && nfo "$1 cache built"; }
        for m in $inst; do bc "$m"; done # no more bg
        # $bg && (bc "$m") & # up $bg || (bc "$m")   # ensure done
    }
    gear_prepare_self() {
        test -e "$HOME/.local/bin/gear" || { mkdir -p "$HOME/.local/bin" && cp "$0" "$HOME/.local/bin/gear"; }
        act="source $FN_ACT_GEARS || true"
        touch "$H/.bashrc"
        for b in "$H/.bashrc" "$H/.zshrc"; do
            test -e "$b" || continue
            grep -q "^$act" <"$b" && continue
            local fn && fn="$(tmpfn brc)" # maybe no sed
            echo -e "$act\n\n" >"$fn"
            cat "$b" >>"$fn"
            mv "$fn" "$b"
        done
    }

    gear_bootstrap_single() {
        shtit "$1:bootstrap"
        bootstrap_add_shell_hook "$1"
    }

    gear_ensure_runnable() {
        test -z "${OS:-}" && die "Only Linux or OSX. Sorry..."
        have wget && return
        have curl && return
        nfo "Have neither wget nor curl - one of these I do require. So:"
        gear_ensure "wget"
    }

    gear_help() {
        echo -e "$DOC"
        echo -e "Gear Mgr Aliases: \n $GM_ALIASES\n"
        test "${1:-}" = false && return || exit 0
    }
    function gear_inst_for_user_by_root {
        # root installs for a specific user - creating it:
        # Then we install already here nix and brew, so that sudo is not required later
        local hu user="$1" && shift
        test "$(whoami)" = "$user" && return 0
        test "$(whoami)" = "root" || die "Require root to run usermode for user $user"
        gear_ensure sys:su,ps

        hu="/home/$user"
        su - "$user" -c 'echo ""' || {
            $INTERACTIVE && confirm "ok to create user $user"
            useradd -md "$hu" -s /bin/bash "$user" || echo "User exists already"
            mkdir -p "$hu/.ssh"
            test -e "$HOME/.ssh/authorized_keys" && {
                cp "$HOME/.ssh/authorized_keys" "$hu/.ssh/" # handy on server installs
                chown -R "$user:$user" "$hu/.ssh"
            }
            su - "$user" -c "mkdir -p $hu/.local/bin"
            chown -R "$user:$user" "$hu/.local"
        }

        test "$1" = bootstrap && {
            have wget || have curl || gear_ensure wget
            $with_nix && {
                gear_ensure xz
                nix:bootstrap
            }
            $with_brew && {
                test -e "/home/linuxbrew/.linuxbrew" || brew:bootstrap
                chown -R "$user:$user" /home/linuxbrew/.linuxbrew

            }
        }
        hu="$hu/.local/bin/gear"
        cp "$0" "$hu"
        chown -R "$user:$user" "$hu"
        su - "$user" -c "export GEAR_DEBUG=$GEAR_DEBUG && eval $hu $*"
        exit $?
    }

    function gear_browse {
        local m fn fns=''
        gear_ensure fzf
        for m in $ALL_GEARMGRS; do
            fn="$GEAR_CFG_DIR/idx.$m" && test -e "$fn" || continue
            fns="$fns $fn"
        done
        test -z "$fns" && die "No index files"
        eval "cat $fns" | fzf
    }
fi
# -------------------------------------------------- main
function main {
    FNLOG="$(tmpfn gearlog)" && export FNLOG && echo '' >"$FNLOG"

    [ -t 0 ] && INTERACTIVE=true || INTERACTIVE=false
    VERBOSE=false
    title "$0 $*" # must be first line
    # test -w / failed on container fs with podman user, where we can write (but not rm /nix)
    test "$UID" = "0" && IS_ROOT=true || IS_ROOT=false
    local cmd user=''
    cmd="${1:-gear_help}"
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -NB) with_nix=true && with_brew=true ;;
            -N | --with-nix) with_nix=true ;;
            -B | --with-brew) with_brew=true ;;
            -u | --user) user="$2" && shift ;;
            -y | --yes) export INTERACTIVE=false ;;
            -x | --debug) set -xv && export GEAR_DEBUG=true ;;
            -h | --help) cmd=gear_help && break ;;
            -v | --verbose) VERBOSE=true ;;
            -pdb) GEAR_NO_EXIT_AT_ERR=true ;;
            b | browse) cmd=gear_browse && break ;;
            e | ensure) cmd=gear_ensure && break ;;
            up | bootstrap) cmd=gear_bootstrap && break ;;
            rm | remove) cmd=gear_remove && break ;;
            i | install) cmd=gear_install && break ;;
            l | list) cmd=gear_list && break ;;
            q | query) cmd=gear_query && break ;;
            s | status) cmd=gear_status && break ;;
            R | run-gear-cmd) cmd=$2 && shift && break ;;
            S | sync) cmd=gear_sync && break ;;
            2readme) "$0" -h 2>/dev/null >README.md && exit ;;
            log) cat "$FNLOG" && exit 0 ;;
            *) die "$1 not supported" ;;
        esac
        shift
    done
    test "$cmd" = "gear_help" && "$cmd" "$@" # exits
    shift
    test -z "$user" || gear_inst_for_user_by_root "$user" "$cmd" "$@"
    gear_ensure_runnable && source_shell_hooks
    "$cmd" "$@"
}

main "$@"
